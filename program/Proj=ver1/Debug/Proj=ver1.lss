
Proj=ver1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f22  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097c  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000825  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000024f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000300  00000000  00000000  00002bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  88:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DistanceSensor_Read>:
	I2C_Write(new_address << 1); // New address shifted left
	I2C_Stop();
}

uint16_t DistanceSensor_Read(uint8_t sensor_address)
{
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
	uint8_t distance_high, distance_low;

	// Start reading from the sensor
	I2C_Start();
  98:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
	I2C_Write(sensor_address << 1);
  9c:	1c 2f       	mov	r17, r28
  9e:	11 0f       	add	r17, r17
  a0:	81 2f       	mov	r24, r17
  a2:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Write(0x1E); // High byte register
  a6:	8e e1       	ldi	r24, 0x1E	; 30
  a8:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Start();
  ac:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
	I2C_Write((sensor_address << 1) | 0x01);
  b0:	8c 2f       	mov	r24, r28
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	c8 2f       	mov	r28, r24
  ba:	c1 60       	ori	r28, 0x01	; 1
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	distance_high = I2C_ReadAck();
  c2:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_ReadAck>
  c6:	d8 2f       	mov	r29, r24

	I2C_Start();
  c8:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
	I2C_Write(sensor_address << 1);
  cc:	81 2f       	mov	r24, r17
  ce:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Write(0x1F); // Low byte register
  d2:	8f e1       	ldi	r24, 0x1F	; 31
  d4:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	I2C_Start();
  d8:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
	I2C_Write((sensor_address << 1) | 0x01);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Write>
	distance_low = I2C_ReadNack();
  e2:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_ReadNack>
  e6:	c8 2f       	mov	r28, r24
	I2C_Stop();
  e8:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Stop>

	return (distance_high << 8) | distance_low;
  ec:	8d 2f       	mov	r24, r29
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	98 2f       	mov	r25, r24
  f2:	88 27       	eor	r24, r24
}
  f4:	8c 2b       	or	r24, r28
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	08 95       	ret

000000fe <I2C_Start>:
}

// Wysy³anie bitu startu
void I2C_Start(void)
{
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); 
  fe:	84 ea       	ldi	r24, 0xA4	; 164
 100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// Czekanie az preryferium zakonczy prace
	while (!(TWCR & (1 << TWINT))); 
 104:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <I2C_Start+0x6>
}
 10c:	08 95       	ret

0000010e <I2C_Stop>:

// Wys³anie bitu stopu
void I2C_Stop(void)
{
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 10e:	84 e9       	ldi	r24, 0x94	; 148
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 114:	08 95       	ret

00000116 <I2C_Write>:
}

// Wpisanie danych na rejsetr
void I2C_Write(uint8_t data)
{
	TWDR = data;
 116:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!(TWCR & (1 << TWINT)));
 120:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 124:	88 23       	and	r24, r24
 126:	e4 f7       	brge	.-8      	; 0x120 <I2C_Write+0xa>
}
 128:	08 95       	ret

0000012a <I2C_ReadAck>:

// Zwrot bitu ACK na magistrale po odczycie
uint8_t I2C_ReadAck(void)
{
	// Read data with ACK
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 12a:	84 ec       	ldi	r24, 0xC4	; 196
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 130:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 134:	88 23       	and	r24, r24
 136:	e4 f7       	brge	.-8      	; 0x130 <I2C_ReadAck+0x6>
	
	return TWDR;
 138:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 13c:	08 95       	ret

0000013e <I2C_ReadNack>:

// Odczyt bez bitu ACK
uint8_t I2C_ReadNack(void)
{
	// Read data with NACK
	TWCR = (1 << TWEN) | (1 << TWINT);
 13e:	84 e8       	ldi	r24, 0x84	; 132
 140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!(TWCR & (1 << TWINT)));
 144:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 148:	88 23       	and	r24, r24
 14a:	e4 f7       	brge	.-8      	; 0x144 <I2C_ReadNack+0x6>
	
	return TWDR;
 14c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 150:	08 95       	ret

00000152 <main>:
#define TOLERANCE 5 
#define F_CPU 16000000U		/////////////////////////////////////////trzeba jakos zmienic na fuseach
	
int main(void)
{
	sei(); // W³¹czenie przerwañ, jeœli s¹ potrzebne
 152:	78 94       	sei

	Motor_Init(); // Inicjalizacja silników
 154:	0e 94 21 01 	call	0x242	; 0x242 <Motor_Init>

	// Ustawienie kierunku obrotu lewego silnika (PC2 i PC3)
	PORTC |= (1 << PC2);
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC3);
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	88 b9       	out	0x08, r24	; 8

	// Ustawienie kierunku obrotu prawego silnika (PD4 i PD7)
	PORTD |= (1 << PD4);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 61       	ori	r24, 0x10	; 16
 168:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD7);
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 77       	andi	r24, 0x7F	; 127
 16e:	8b b9       	out	0x0b, r24	; 11
	
	while (1)
	{
		//// Tylko lewy silnik na pe³nej mocy
		OCR0A = 128;  // Pe³na moc dla lewego silnika
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	87 bd       	out	0x27, r24	; 39
		OCR0B = 128;    // Prawy silnik wy³¹czony
 174:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	3a e1       	ldi	r19, 0x1A	; 26
 17a:	96 e0       	ldi	r25, 0x06	; 6
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	30 40       	sbci	r19, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x2a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x34>
 186:	00 00       	nop
		_delay_ms(2000);

		//// Tylko prawy silnik na pe³nej mocy
		OCR0A = 255;    // Lewy silnik wy³¹czony
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	97 bd       	out	0x27, r25	; 39
		OCR0B = 128;  // Pe³na moc dla prawego silnika
 18c:	88 bd       	out	0x28, r24	; 40
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	3a e1       	ldi	r19, 0x1A	; 26
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	21 50       	subi	r18, 0x01	; 1
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x42>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x4c>
 19e:	00 00       	nop
 1a0:	e7 cf       	rjmp	.-50     	; 0x170 <main+0x1e>

000001a2 <__vector_11>:
volatile uint16_t distance2;
volatile uint16_t distance3;
volatile uint16_t distance4;

ISR(TIMER1_COMPA_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	distance1 = DistanceSensor_Read(SENSOR1_ADDR); //pd0 use a cable	central right = x1
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	0e 94 48 00 	call	0x90	; 0x90 <DistanceSensor_Read>
 1ca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <distance1+0x1>
 1ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <distance1>
	distance2 = DistanceSensor_Read(SENSOR2_ADDR); //pd1 use a cable	central left = x2
 1d2:	81 e3       	ldi	r24, 0x31	; 49
 1d4:	0e 94 48 00 	call	0x90	; 0x90 <DistanceSensor_Read>
 1d8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <distance2+0x1>
 1dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <distance2>
	distance3 = DistanceSensor_Read(SENSOR3_ADDR);	//pb1	right sensor x3
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	0e 94 48 00 	call	0x90	; 0x90 <DistanceSensor_Read>
 1e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	distance4 = DistanceSensor_Read(SENSOR4_ADDR);	//pb2	left sensor x4
 1ee:	83 e3       	ldi	r24, 0x33	; 51
 1f0:	0e 94 48 00 	call	0x90	; 0x90 <DistanceSensor_Read>
 1f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <distance4+0x1>
 1f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <distance4>
	
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <Timer0_Init>:

  // Inicjalizacja Timer0 do generowania PWM na PD6 (OC0A) i PD5 (OC0B)
  void Timer0_Init()
  {
	  // Ustawienie Fast PWM (WGM02 = 0, WGM01 = 1, WGM00 = 1)
	  TCCR0A |= (1 << WGM00) | (1 << WGM01);
 21e:	84 b5       	in	r24, 0x24	; 36
 220:	83 60       	ori	r24, 0x03	; 3
 222:	84 bd       	out	0x24, r24	; 36
	  TCCR0B &= ~(1 << WGM02); // Upewnij siê, ¿e WGM02 jest wyzerowane
 224:	85 b5       	in	r24, 0x25	; 37
 226:	87 7f       	andi	r24, 0xF7	; 247
 228:	85 bd       	out	0x25, r24	; 37
	  TCCR0B |= (1 << CS01) | (1 << CS00);  // Prescaler 64
 22a:	85 b5       	in	r24, 0x25	; 37
 22c:	83 60       	ori	r24, 0x03	; 3
 22e:	85 bd       	out	0x25, r24	; 37

	  // W³¹czenie PWM na OC0A (PD6) i OC0B (PD5), tryb nieodwracaj¹cy
	  TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
 230:	84 b5       	in	r24, 0x24	; 36
 232:	80 6a       	ori	r24, 0xA0	; 160
 234:	84 bd       	out	0x24, r24	; 36

	  // Ustawienie pocz¹tkowego wype³nienia PWM na 0 (silniki wy³¹czone)
	  OCR0A = 0;
 236:	17 bc       	out	0x27, r1	; 39
	  OCR0B = 0;
 238:	18 bc       	out	0x28, r1	; 40

	  // Ustawienie PD6 i PD5 jako wyjœcia (PWM)
	  DDRD |= (1 << PD6) | (1 << PD5);
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	80 66       	ori	r24, 0x60	; 96
 23e:	8a b9       	out	0x0a, r24	; 10
 240:	08 95       	ret

00000242 <Motor_Init>:
  }

  // Inicjalizacja pinów kierunku (DIR_1 i DIR_2 dla obu silników)
  void Motor_Init()
  {
	  Timer0_Init();
 242:	0e 94 0f 01 	call	0x21e	; 0x21e <Timer0_Init>
	  // Ustawienie PC2, PC3 (lewy silnik) i PD4, PD7 (prawy silnik) jako wyjœcia
	  DDRC |= (1 << PC2) | (1 << PC3);
 246:	87 b1       	in	r24, 0x07	; 7
 248:	8c 60       	ori	r24, 0x0C	; 12
 24a:	87 b9       	out	0x07, r24	; 7
	  DDRD |= (1 << PD4) | (1 << PD7);
 24c:	8a b1       	in	r24, 0x0a	; 10
 24e:	80 69       	ori	r24, 0x90	; 144
 250:	8a b9       	out	0x0a, r24	; 10
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
